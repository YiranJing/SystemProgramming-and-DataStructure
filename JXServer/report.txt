Setup: socket() -> bind() -> listen() -> accept()
    socket(): (initialise a new TCP socket)
            Create a socket node (endpoint for communication) and returns a file descriptor that refers to that endpoint (using TCP connection (SOCKET_STREAM) and IPv4 Internet protocols in this case (AF_INET)).
    bind(): (combining the port and IP address)
            Associates the socket we create to the address and port number specified in the address.
            By doing so, clients can use this particular address and port to connect to this server.
    listen(): (set socket listening for incoming connections)
            Waits for clients to approach the server to make a connection (connect() is the system call from the client-side)
            Also set the maximum length to which the queue of pending connections may grow.
    accept(): (accept connection from client)
            It extracts the first connection request on the queue of pending connections for the listening socket, and creates a new connected socket, and returns a new file descriptor referring to this socket.
            If it is successful, this particular accepted connection is established between client and server, and they are ready to transfer data.
 
Handle single connection: (connection_handler() function)
    Preparation steps: We firstly extract IP address and port number from the given binary configuration file using function read_address_and_port(), then setup socket and connection based on the setup steps above. After a successful connection, now the client and server can transfer data referring to the new connected socket.
    1. Receive message: the (data) is sent (send()) from client-side, and received (recv()) by server.
    2. Read message: Including request type, compression request, payload length, and variable byte payload: if it is a valid type filed, we will send response message to client, otherwise this connection will be closed.
    3. Send response message to client based on the request type and compression request. The client will wait until all appropriate responses are sent by server.
    4. Wait for the coming requests from this client, repeat step 1-3, until client sends a shutdown message to the server (recv() will return 0 in the server-side). Then, this connected socket for client will be closed and also free associated data.
    
Handle multiple connections: (Referring to the main() function)
    To handle multiple (concurrent) requests, I create a new pthread for each new connection, assign the same function (connection_handler()) to each thread, and keep to increase the number of threads within the while loop. By doing so, my program can respond to multiple connections without blocking on others, and the number of threads is equal to the number of connections.
    
    However, the current method might lead to poor performance when program receives a huge number of connections since it will have expensive overhead costs due to creating many threads, and the threads that finish early have to wait for other threads (load imbalance). To handle these problems, the thread pool will be applied after milestone.
